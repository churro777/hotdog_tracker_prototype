name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # ============================================================================
  # QUALITY CHECKS - Code quality, tests, and type checking
  # ============================================================================
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm run test:run
        env:
          VITE_APP_NAME: 'Hot Dog Tracker'
          VITE_APP_VERSION: '0.0.0'
          VITE_APP_ENVIRONMENT: 'test'
          VITE_DEV_MODE: 'false'
          VITE_DEBUG_ENABLED: 'false'
          VITE_ENABLE_ANALYTICS: 'false'
          VITE_ENABLE_ERROR_REPORTING: 'false'
          VITE_USE_FIREBASE: 'false'
          VITE_FIREBASE_USE_EMULATOR: 'false'

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          VITE_APP_NAME: 'Hot Dog Tracker'
          VITE_APP_VERSION: '0.0.0'
          VITE_APP_ENVIRONMENT: 'test'
          VITE_DEV_MODE: 'false'
          VITE_DEBUG_ENABLED: 'false'
          VITE_ENABLE_ANALYTICS: 'false'
          VITE_ENABLE_ERROR_REPORTING: 'false'
          VITE_USE_FIREBASE: 'false'
          VITE_FIREBASE_USE_EMULATOR: 'false'

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/coverage-final.json
          fail_ci_if_error: false

      - name: Build application
        run: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_USE_FIREBASE: 'true'
          VITE_APP_ENVIRONMENT: 'production'

      - name: Check bundle size
        run: npm run build:size

      # Cache build artifacts for other jobs
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: build-${{ github.sha }}

  # ============================================================================
  # ACCESSIBILITY TESTS - Lighthouse and a11y checks
  # ============================================================================
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: deploy
    # Only run after successful deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_USE_FIREBASE: 'true'
          VITE_APP_ENVIRONMENT: 'production'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # ============================================================================
  # SECURITY SCANS - Dependency, code, and secret scanning
  # ============================================================================
  security-dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Check for known security issues
        run: npx audit-ci --moderate
        continue-on-error: false

  security-codeql-scan:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    # Only run if Advanced Security is available
    if: github.repository_owner == 'github' || github.event.repository.private == false || vars.ENABLE_ADVANCED_SECURITY == 'true'
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  security-secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (github.repository_owner == 'github' || github.event.repository.private == false || vars.ENABLE_ADVANCED_SECURITY == 'true')
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # DEPLOYMENT - Deploy to Firebase Hosting only after all checks pass
  # ============================================================================
  deploy:
    name: Deploy to Firebase Hosting
    runs-on: ubuntu-latest
    # Only run on push to main (not PRs) and only after all other jobs succeed
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs:
      - quality-checks
      - security-dependency-scan
      - security-vulnerability-scan

    environment:
      name: production
      url: https://hotdog-tracker-def59.web.app

    permissions:
      contents: read
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_APP_NAME: 'Hot Dog Tracker'
          VITE_APP_VERSION: '1.0.0'
          VITE_APP_ENVIRONMENT: 'production'
          VITE_DEV_MODE: 'false'
          VITE_DEBUG_ENABLED: 'false'
          VITE_ENABLE_ANALYTICS: 'true'
          VITE_ENABLE_ERROR_REPORTING: 'true'
          VITE_USE_FIREBASE: 'true'
          VITE_FIREBASE_USE_EMULATOR: 'false'
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

      - name: Generate bundle analysis
        run: npm run build:analyze

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_HOTDOG_TRACKER_DEF59 }}'
          projectId: hotdog-tracker-def59
          channelId: live

      - name: Comment deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: 'https://hotdog-tracker-def59.web.app',
              description: 'Deployed to Firebase Hosting',
              context: 'deployment'
            })

  # ============================================================================
  # SUMMARY - Show pipeline results summary (log for pushes, comment on PRs)
  # ============================================================================
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    if: always()
    needs:
      - quality-checks
      - security-dependency-scan
      - security-vulnerability-scan
      - deploy
      - accessibility-tests

    steps:
      - name: Post pipeline summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Quality Checks': '${{ needs.quality-checks.result }}',
              'Dependency Security': '${{ needs.security-dependency-scan.result }}',
              'Vulnerability Scan': '${{ needs.security-vulnerability-scan.result }}',
              'Deploy to Firebase': '${{ needs.deploy.result }}',
              'Accessibility Tests': '${{ needs.accessibility-tests.result }}'
            };

            let summary = '## 🚀 CI/CD Pipeline Results\n\n';
            for (const [job, result] of Object.entries(results)) {
              const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : result === 'cancelled' ? '⏹️' : '⏳';
              summary += `${icon} **${job}**: ${result}\n`;
            }

            // Log summary to Actions output for all runs
            console.log(summary);

            // Only comment on PRs
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
